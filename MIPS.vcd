$date
	Tue Aug 01 20:01:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! outputULA [0:31] $end
$var reg 2 " OpALU [0:1] $end
$var reg 32 # a [0:31] $end
$var reg 32 $ b [0:31] $end
$var reg 1 % clk $end
$var reg 6 & funct [0:5] $end
$scope module MIPS_tb $end
$var wire 2 ' OpALU [0:1] $end
$var wire 32 ( a [0:31] $end
$var wire 32 ) b [0:31] $end
$var wire 1 % clk $end
$var wire 6 * funct [0:5] $end
$var wire 32 + outputULA [0:31] $end
$var wire 4 , inputALU [0:3] $end
$scope module ULA $end
$var wire 32 - a [0:31] $end
$var wire 32 . b [0:31] $end
$var wire 1 % clk $end
$var wire 4 / inputULA [0:3] $end
$var reg 32 0 outputULA [0:31] $end
$upscope $end
$scope module ULAControl $end
$var wire 2 1 OpALU [0:1] $end
$var wire 1 % clk $end
$var wire 6 2 funct [0:5] $end
$var reg 4 3 inputALU [0:3] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10 3
b0 2
b0 1
bx 0
b10 /
b11 .
b11 -
b10 ,
bx +
b0 *
b11 )
b11 (
b0 '
b0 &
0%
b11 $
b11 #
b0 "
bx !
$end
#1
b110 !
b110 +
b110 0
1%
#2
0%
b1 #
b1 (
b1 -
b100000 &
b100000 *
b100000 2
b10 "
b10 '
b10 1
#3
b100 !
b100 +
b100 0
1%
#4
b110 ,
b110 /
b110 3
0%
b1 $
b1 )
b1 .
b11 #
b11 (
b11 -
b100010 &
b100010 *
b100010 2
#5
b10 !
b10 +
b10 0
1%
#6
b0 ,
b0 /
b0 3
0%
b100100 &
b100100 *
b100100 2
#7
b1 !
b1 +
b1 0
1%
#8
b1 ,
b1 /
b1 3
0%
b100101 &
b100101 *
b100101 2
#9
b11 !
b11 +
b11 0
1%
#10
b111 ,
b111 /
b111 3
0%
b11 $
b11 )
b11 .
b1 #
b1 (
b1 -
b101010 &
b101010 *
b101010 2
#11
b1 !
b1 +
b1 0
1%
#12
0%
